import os
from dotenv import load_dotenv
from werkzeug.security import generate_password_hash
from sqlalchemy import create_engine, text

load_dotenv()

DB  = os.getenv("DATABASE","housedepot")
HOST= os.getenv("HOST","localhost")
PORT= os.getenv("PORT","3306")
USER= os.getenv("USER","root")
PWD = os.getenv("PASSWORD","")
dsn = f"mysql+pymysql://{USER}:{PWD}@{HOST}:{PORT}/{DB}"

ADMIN_USER = "admin"
ADMIN_EMAIL= os.getenv("ADMIN_EMAIL")
ADMIN_PASS = os.getenv("ADMIN_PASSWORD")

if not ADMIN_EMAIL or not ADMIN_PASS:
    raise SystemExit("Set ADMIN_EMAIL and ADMIN_PASSWORD in .env (quote the password).")

engine = create_engine(dsn, future=True)
pwd_hash = generate_password_hash(ADMIN_PASS)

with engine.begin() as conn:
    row = conn.execute(text("SELECT id FROM admin_users WHERE username=:u"), {"u": ADMIN_USER}).fetchone()
    if row:
        conn.execute(text("UPDATE admin_users SET password_hash=:p, email=:e WHERE id=:id"),
                     {"p": pwd_hash, "e": ADMIN_EMAIL, "id": row.id})
        print("Updated existing admin hash.")
    else:
        conn.execute(text("""
            INSERT INTO admin_users (username, password_hash, email, full_name)
            VALUES (:u, :p, :e, :f)
        """), {"u": ADMIN_USER, "p": pwd_hash, "e": ADMIN_EMAIL, "f": "Admin User"})
        print("Inserted admin user.")
print("Ready. Login with username=admin and your ADMIN_PASSWORD from .env")
